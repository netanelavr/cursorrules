---
description: 
globs: 
alwaysApply: false
---
---
description: >
  Code review rule for pre-PR analysis. Challenges architectural decisions, examines
  the diff with the default branch, and provides comprehensive feedback on code
  quality, security, performance, and maintainability before publishing.
globs:
  - "**/*.ts"
  - "**/*.js"
  - "**/*.py"
alwaysApply: false
questions:
  - "Why this approach? Is there a simpler way?"
  - "What are the trade-offs? What are we sacrificing?"
  - "What could go wrong? Failure modes and edge cases?"
  - "How will this scale with 10× load/data/users?"
  - "How will we maintain this over time?"
---

# Pre-PR Code Review

Comprehensive code-review analysis before publishing a PR, combining architectural
review with diff analysis against the default branch.

## Review Philosophy
Be constructively critical. Focus on maintainability, security, performance, and
reliability. Balance perfection with progress — not every PR must be perfect, but
it should meet agreed-upon quality standards.

---

## Pre-Review Analysis

### 1. Change Scope
- **Diff Analysis** — list files modified, added, or deleted versus the default branch  
- **Impact Assessment** — identify affected systems and components  
- **Breaking Changes** — flag potential compatibility issues  
- **Dependencies** — review new, updated, or removed dependencies  

### 2. Challenge-First Mindset
- **Question Everything** — challenge fundamental design decisions  
- **Alternative Solutions** — consider better or simpler approaches  
- **Risk Assessment** — identify edge cases and failure modes  
- **Future Implications** — assess long-term maintenance impact  

---

## Review Checklist

### 3. Architecture & Design
- Ensure design patterns are appropriate and not over-engineered  
- Keep abstraction levels and system boundaries clear  
- Maintain loose coupling, high cohesion, and SOLID compliance  
- Separate business logic from infrastructure concerns  

### 4. Code Quality
- Use meaningful, self-documenting names  
- Keep functions and classes focused and not overly complex  
- Implement comprehensive and consistent error handling  
- Document complex decisions where necessary  

### 5. Performance & Security
- Avoid obvious bottlenecks and N+1 query issues  
- Validate input and prevent injection attacks  
- Protect sensitive data appropriately  
- Manage and clean up resources properly  

### 6. Testing & APIs
- Provide adequate test coverage, including edge cases  
- Ensure APIs remain consistent and backward compatible  
- Make database changes safe and reversible  
- Define clear deployment and rollback strategies  

---

## Key Review Questions

(Automatically surfaced by tooling — see YAML front-matter `questions` list.)

---

## Review Output

### Summary
- Overall assessment and major concerns  
- Key recommendations and action items  

### Approval Criteria
- [ ] No critical security vulnerabilities  
- [ ] No performance bottlenecks for expected load  
- [ ] Code follows project standards with adequate tests  
- [ ] Breaking changes are documented and justified  